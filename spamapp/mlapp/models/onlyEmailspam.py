# -*- coding: utf-8 -*-
"""onlyEmailspam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uLjDVWzO82SNBooQIhR1YYxA8mkoxRnI
"""

# Importing necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud
import nltk
import re
from nltk.corpus import stopwords
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, f1_score, confusion_matrix
import joblib

# Downloading NLTK data if not already downloaded
nltk.download('stopwords')

# Load dataset (ensure the path is correct)
df = pd.read_csv('E:\\dataset\\spamnew.csv', encoding='latin1')  # Adjust path as needed
df.drop(columns=['Unnamed: 2', 'Unnamed: 3', 'Unnamed: 4'], inplace=True)
df.rename(columns={'v1': 'target', 'v2': 'text'}, inplace=True)

# Encode target variable
df['target'] = df['target'].map({'ham': 0, 'spam': 1})

# Text preprocessing function with URL removal
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
    return text

df['transformed_text'] = df['text'].apply(preprocess_text)

# Vectorization using TfidfVectorizer
tfidf = TfidfVectorizer(stop_words='english')
X = tfidf.fit_transform(df['transformed_text'])
y = df['target'].values

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a Logistic Regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Save the trained model and vectorizer
joblib.dump(model, 'spam_model.pkl')
joblib.dump(tfidf, 'tfidf_vectorizer.pkl')

# Evaluation code
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)

print(f'Accuracy: {accuracy:.4f}')
print(f'Precision: {precision:.4f}')
print(f'F1 Score: {f1:.4f}')

# Prediction function
def predict_message(message):
    processed_message = preprocess_text(message)
    message_tfidf = tfidf.transform([processed_message])
    prediction_proba = model.predict_proba(message_tfidf)[:, 1]
    threshold = 0.4
    prediction = (prediction_proba >= threshold).astype(int)

    if prediction[0] == 1:
        return "Spam", prediction_proba[0]
    else:
        return "Not Spam", prediction_proba[0]

# Example usage of prediction function
new_message = "Congratulations! You've won a $1,000 gift card! Click here to claim your prize now!"
result, probability = predict_message(new_message)
print(f'The message is predicted as {result} with a probability of {probability:.4f}')

# To load the model later (this part should be in another script or function):
# model = joblib.load('spam_model.pkl')
# tfidf = joblib.load('tfidf_vectorizer.pkl')